---
title: Règles de Golomb
---

# Introduction

Ce projet est une exploration d'un objet combinatoire dont la définition simple engendre une complexité non bornée. Il s'agit d'une règle de Golomb, un ensemble des nombres naturels avec la propriété fondamentale que les distances par paires sont uniques. Cette section présente le problème d'optimisation associé ainsi que le termes importantes qui seront utilisés dans la suivante.

## Vocabulaire

Nous introduisons tout d'abord la notion d'une règle afin de pouvoir distinguer entre une règle simple et celle-ci qui satisfait ce que l'on appèle la propriété de Golomb. Quoique triviale, ce terme est répandu dans la bibliothèque que nous avons développé pendant notre étude et donc nécessaire à expliciter.

###### **Règle**
Un ensemble des nombres naturels. Exemple: $\{1, 2, 5\}$


###### **Marque**
Un élément d'une règle.

###### **Ordre**
Le nombre de marques d'une régle. La règle $\{1, 6, 10\}$ est d'ordre 3.

###### **Longueur**
La magnitude du marque le plus important. La règle $\{0, 4, 99\}$ a une longueur de 99.

###### **Propriété de Golomb**
La condition à satisfaire pour qu'une règle peut se considérer en tant que règle de Golomb: que tous les distances deux à deux des marques sont uniques. Par exemple, la règle $\{0, 1, 2\}$ ne satisfait pas la propriété de Golomb tandis que $\{0, 1, 7\}$ est bien une règle de Golomb.

Avec ce cadre de termes établi, nous sommes prêts à introduire le problème de Règle de Golomb Optimale ($\verb|OGR|$).

## $\verb|OGR|$ - Énoncé

Donné un ordre $k$, trouver une règle de Golomb dont la longueur est minimale.

---



##### **Première approche**

Sans trop y réfléchir, nous formulons un algorithme naif pour trouver une règle de Golomb optimale:

0. Commencer à $n \gets k$
1. Énumérer tous les règles d'ordre $k$ et de longueur $n$
2. Si nous tombons sur une règle de Golomb, c'est gagné, nous avons trouvé une règle de Golomb optimale
3. Sinon, continuer à l'étape (1) avec $n \gets n + 1$

Avant de faire une analyse en rigueure, nous commencons par illustrer une instance très simple - prenons le cas où $k = 4$.

##### **Exemple**

Il y a 3 règles d'ordre 4 et de longueur 4:[^1]
```py
[0, 2, 3, 4]
[0, 1, 3, 4]
[0, 1, 2, 4]
```

[^1]: Nous avons énuméré les ordres avec un outil que nous avons développe, `ogr-py`. Nous générons cette sortie avec la commande `ogr enum 4 --order 4 --exact`, ce qui sera détaillé dans la suite.

dont aucune satisfait la propriété de Golomb. Passons donc à énumérer les règles de longueur 5, en gardant le même ordre ciblé. Cette fois-ci il y'en a six:
```py
[0, 3, 4, 5]
[0, 2, 4, 5]
[0, 2, 3, 5]
[0, 1, 4, 5]
[0, 1, 3, 5]
[0, 1, 2, 5]
```
Mais nous avons toujours pas trouvé une qui est de Golomb. Nous répétons ce procésus encore une fois, en enumérant les règles d'ordre 4 et de longueur 6:

```py
[0, 4, 5, 6]
[0, 3, 5, 6]
[0, 3, 4, 6]
[0, 2, 5, 6] **
[0, 2, 4, 6]
[0, 2, 3, 6]
[0, 1, 5, 6]
[0, 1, 4, 6] **
[0, 1, 3, 6]
[0, 1, 2, 6]
```

Alors que ce n'est pas évident au premier coup d'oeuil, parmi ces 10 règles il y a deux règles de Golomb qui se cachent: $\{0, 2, 5, 6\}$ et $\{0, 1, 4, 6\}$!



En consultant la [page wikipedia](https://fr.wikipedia.org/wiki/R%C3%A8gle_de_Golomb), nous confirmons que ces règles sont optimales.[^2]

##### **Analyse**

Il ne prends pas beaucoup de temps pour se rendre compte que cette stratégie n'est pas tenable. Si nous employons une stratégie d'énumération exhaustive, nous devons lister à chaque tour $2^{(n - 1)}$ règles de taille $n$, les filtrer par ordre, et finalement les filter par la propriété de Golomb.

Pour illuster le tour avec $n = 5$ et $k = 4$, nous avons:

| $n = 5$ | $k = 4$ | Golomb |
| :--- | :----- | :----- |
| [0, 5] | | |
| [0, 4, 5] | | |
| [0, 3, 5] | | |
| [0, 3, 4, 5] | [0, 3, 4, 5] | |
| [0, 2, 5] | | |
| [0, 2, 4, 5] | [0, 2, 4, 5] | |
| [0, 2, 3, 5] | [0, 2, 3, 5] | |
| [0, 2, 3, 4, 5] | | |
| [0, 1, 5] | | |
| [0, 1, 4, 5] | [0, 1, 4, 5] | |
| [0, 1, 3, 5] | [0, 1, 3, 5] | |
| [0, 1, 3, 4, 5] | | |
| [0, 1, 2, 5] | [0, 1, 2, 5] | |
| [0, 1, 2, 4, 5] | | |
| [0, 1, 2, 3, 5] | | |
| [0, 1, 2, 3, 4, 5] | | |
| 16 | 4 | 0 | --- |


Plus tard nous allons discuter des stratégies pour rendre cet algorithme plus efficace.

###### **Programme Linéaire**

Nous pouvons résoudre le problème $\verb|OGR|$ plus efficacement à l'aide d'un programme Linéaire. Voici le modèle que nous avons implémenté en AMPL:

```AMPL
param upper_bound;
param order;

set N = {1..order};
set V = {1..upper_bound};
set pairs = {i in N, j in (i + 1)..order};
set pairs_consecutive = {i in 1..order - 1, j in (i + 1)..order};

var d {pairs} >= 1;
var e {pairs, V} binary;

minimize total_length: d[1, order];

subject to distance_assignment {(i, j) in pairs}:
    sum{v in V} e[i, j, v] = 1;

subject to distance_uniqueness {v in V}:
    sum {(i, j) in pairs} e[i, j, v] <= 1;

subject to distance_definition {(i, j) in pairs}:
    sum {v in V} v * e[i, j, v] = d[i, j];

subject to distance_identity {(i, j) in pairs_consecutive}:
    sum {k in i..j - 1} d[k, k + 1] = d[i, j];
```




[^2]: Pour être précis, nous considérons que les deux règles $\{0, 2, 5, 6\}$ et $\{0, 1, 4, 6\}$ sont équivalents. Cela est éclairé si on considére les différences entre voisins pour les deux règles ($2 - 0$, $5 - 2$, etc.): $[2, 3, 1]$ et $[1, 3, 2]$.
$[2, 3, 1]$ peut être considéré comme une sorte de rotation modulaire de $[1, 3, 2]$. Donc, sur wikipedia nous ne voyons que l'entrée $\{0, 1, 4, 6\}$.


## Ogr-Rust

## Modélisation

## AMPL